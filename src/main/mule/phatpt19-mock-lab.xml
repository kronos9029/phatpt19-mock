<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns:db="http://www.mulesoft.org/schema/mule/db" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:apikit="http://www.mulesoft.org/schema/mule/mule-apikit" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd http://www.mulesoft.org/schema/mule/mule-apikit http://www.mulesoft.org/schema/mule/mule-apikit/current/mule-apikit.xsd http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd 
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd">
    <http:listener-config name="phatpt19-mock-lab-httpListenerConfig" basePath="test-api">
        <http:listener-connection host="0.0.0.0" port="8081" />
    </http:listener-config>
    <apikit:config name="phatpt19-mock-lab-config" api="phatpt19-mock-lab.raml" outboundHeadersMapName="outboundHeaders" httpStatusVarName="httpStatus" />
    <db:config name="Database_Config" doc:name="Database Config" doc:id="d1442baa-6a29-427c-ace6-ddc1d81dab51" >
		<db:my-sql-connection host="localhost" port="3306" user="root" password="kronos9029" database="emp-mock" />
	</db:config>
	<flow name="phatpt19-mock-lab-main">
        <http:listener config-ref="phatpt19-mock-lab-httpListenerConfig" path="/api/*">
            <http:response statusCode="#[vars.httpStatus default 200]">
                <http:headers>#[vars.outboundHeaders default {}]</http:headers>
            </http:response>
            <http:error-response statusCode="#[vars.httpStatus default 500]">
                <http:body>#[payload]</http:body>
                <http:headers>#[vars.outboundHeaders default {}]</http:headers>
            </http:error-response>
        </http:listener>
        <apikit:router config-ref="phatpt19-mock-lab-config" />
        <error-handler>
            <on-error-propagate type="APIKIT:BAD_REQUEST">
                <ee:transform doc:name="Transform Message">
                    <ee:message>
                        <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{message: "Bad request"}]]></ee:set-payload>
                    </ee:message>
                    <ee:variables>
                        <ee:set-variable variableName="httpStatus">400</ee:set-variable>
                    </ee:variables>
                </ee:transform>
            </on-error-propagate>
            <on-error-propagate type="APIKIT:NOT_FOUND">
                <ee:transform doc:name="Transform Message">
                    <ee:message>
                        <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{message: "Resource not found"}]]></ee:set-payload>
                    </ee:message>
                    <ee:variables>
                        <ee:set-variable variableName="httpStatus">404</ee:set-variable>
                    </ee:variables>
                </ee:transform>
            </on-error-propagate>
            <on-error-propagate type="APIKIT:METHOD_NOT_ALLOWED">
                <ee:transform doc:name="Transform Message">
                    <ee:message>
                        <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{message: "Method not allowed"}]]></ee:set-payload>
                    </ee:message>
                    <ee:variables>
                        <ee:set-variable variableName="httpStatus">405</ee:set-variable>
                    </ee:variables>
                </ee:transform>
            </on-error-propagate>
            <on-error-propagate type="APIKIT:NOT_ACCEPTABLE">
                <ee:transform doc:name="Transform Message">
                    <ee:message>
                        <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{message: "Not acceptable"}]]></ee:set-payload>
                    </ee:message>
                    <ee:variables>
                        <ee:set-variable variableName="httpStatus">406</ee:set-variable>
                    </ee:variables>
                </ee:transform>
            </on-error-propagate>
            <on-error-propagate type="APIKIT:UNSUPPORTED_MEDIA_TYPE">
                <ee:transform doc:name="Transform Message">
                    <ee:message>
                        <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{message: "Unsupported media type"}]]></ee:set-payload>
                    </ee:message>
                    <ee:variables>
                        <ee:set-variable variableName="httpStatus">415</ee:set-variable>
                    </ee:variables>
                </ee:transform>
            </on-error-propagate>
            <on-error-propagate type="APIKIT:NOT_IMPLEMENTED">
                <ee:transform doc:name="Transform Message">
                    <ee:message>
                        <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{message: "Not Implemented"}]]></ee:set-payload>
                    </ee:message>
                    <ee:variables>
                        <ee:set-variable variableName="httpStatus">501</ee:set-variable>
                    </ee:variables>
                </ee:transform>
            </on-error-propagate>
        </error-handler>
    </flow>
    <flow name="phatpt19-mock-lab-console">
        <http:listener config-ref="phatpt19-mock-lab-httpListenerConfig" path="/console/*">
            <http:response statusCode="#[vars.httpStatus default 200]">
                <http:headers>#[vars.outboundHeaders default {}]</http:headers>
            </http:response>
            <http:error-response statusCode="#[vars.httpStatus default 500]">
                <http:body>#[payload]</http:body>
                <http:headers>#[vars.outboundHeaders default {}]</http:headers>
            </http:error-response>
        </http:listener>
        <apikit:console config-ref="phatpt19-mock-lab-config" />
        <error-handler>
            <on-error-propagate type="APIKIT:NOT_FOUND">
                <ee:transform doc:name="Transform Message">
                    <ee:message>
                        <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{message: "Resource not found"}]]></ee:set-payload>
                    </ee:message>
                    <ee:variables>
                        <ee:set-variable variableName="httpStatus">404</ee:set-variable>
                    </ee:variables>
                </ee:transform>
            </on-error-propagate>
        </error-handler>
    </flow>
    <flow name="put:\employee:application\json:phatpt19-mock-lab-config">
        <logger level="INFO" doc:name="Start Logger" doc:id="0cc33c37-5d64-481e-90ad-6652d8bdc5c1" message="Insert to database started"/>
		<ee:transform doc:name="Transform Message">
            <ee:message>
                <ee:set-payload><![CDATA[%dw 2.0
output application/java
---
{
	employeeID: attributes.headers.'x-transaction-id' default uuid(),
	employeeFirstName: payload.employeeFirstName,
	employeeLastName: payload.employeeLastName,
	employeeFullName: payload.employeeFirstName ++ payload.employeeLastName,
	employeeEmail: payload.employeeEmail,
	address: payload.address
}]]></ee:set-payload>
            </ee:message>
			<ee:variables >
				<ee:set-variable variableName="empDTO" ><![CDATA[%dw 2.0
output application/java
---
{
	employeeID: attributes.headers.'x-transaction-id' default uuid(),
	employeeFirstName: payload.employeeFirstName,
	employeeLastName: payload.employeeLastName,
	employeeFullName: payload.employeeFirstName ++ payload.employeeLastName,
	employeeEmail: payload.employeeEmail,
	address: payload.address
}]]></ee:set-variable>
			</ee:variables>
        </ee:transform>
		<db:insert doc:name="Insert" doc:id="b197a9c3-2602-4a5f-928f-905e130d60d0" config-ref="Database_Config">
			<db:sql ><![CDATA[INSERT INTO emp(emp_id, emp_first_name, emp_last_name, emp_full_name, emp_email, emp_address) VALUES(:empID ,:empFirstName, :empStatus, :empLastName, :empFullName)]]></db:sql>
			<db:input-parameters ><![CDATA[#[output application/java
---
{
	empID: vars.empDTO.employeeID default uuid(),
	empFirstName: (vars.empDTO.employeeFirstName default ""),
	empLastName: (vars.empDTO.employeeLastName default "") ,
	empEmail: vars.empDTO.employeeEmail,
	empAddress: vars.empDTO.address
}]]]></db:input-parameters>
		</db:insert>
		<logger level="INFO" doc:name="End Logger" doc:id="1d44dd38-185e-4647-93f8-74aa007c0424" message="Process ened"/>
    </flow>
    <flow name="get:\status-check\(employeeID):phatpt19-mock-lab-config">
        <ee:transform doc:name="Transform Message">
            <ee:variables>
                <ee:set-variable variableName="employeeID">attributes.uriParams.'employeeID'</ee:set-variable>
            </ee:variables>
        </ee:transform>
        <ee:transform doc:name="Transform Message">
            <ee:message>
                <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
  message: "employee is alive and kicking"
} as Object {encoding: "UTF-8", mediaType: "application/json"}]]></ee:set-payload>
            </ee:message>
        </ee:transform>
    </flow>
    <flow name="get:\employee\(employeeID):phatpt19-mock-lab-config">
        <ee:transform doc:name="Transform Message">
            <ee:variables>
                <ee:set-variable variableName="employeeID">attributes.uriParams.'employeeID'</ee:set-variable>
            </ee:variables>
        </ee:transform>
        <ee:transform doc:name="Transform Message">
            <ee:message>
                <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
  employeeID: 1,
  employeeFirstName: "Thomas",
  employeeLastName: "Edison",
  employeeEmail: "employeeThomas@gmail.com",
  address: "123 Groove Street"
} as Object {encoding: "UTF-8", mediaType: "application/json"}]]></ee:set-payload>
            </ee:message>
        </ee:transform>
    </flow>
    <flow name="post:\employee:application\json:phatpt19-mock-lab-config">
		<logger level="INFO" doc:name="Start Logger" doc:id="415b7925-be09-46fd-930e-d0ca4954f6c2" message="Insert to database started" />
		<ee:transform doc:name="Transform Message1" doc:id="e1abd72d-4159-49c2-b803-70101fd9aa4b" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/java
---
{
	employeeID: attributes.headers.'x-transaction-id' default uuid(),
	employeeFirstName: payload.employeeFirstName,
	employeeLastName: payload.employeeLastName,
	employeeFullName: payload.employeeFirstName ++ payload.employeeLastName,
	employeeEmail: payload.employeeEmail,
	address: payload.address
}]]></ee:set-payload>
			</ee:message>
			<ee:variables >
				<ee:set-variable variableName="empDTO" ><![CDATA[%dw 2.0
output application/java
---
{
	employeeID: attributes.headers.'x-transaction-id' default uuid(),
	employeeFirstName: payload.employeeFirstName,
	employeeLastName: payload.employeeLastName,
	employeeFullName: payload.employeeFirstName ++ payload.employeeLastName,
	employeeEmail: payload.employeeEmail,
	address: payload.address
}]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
		<db:insert doc:name="Insert" doc:id="f73c9352-56e6-4d23-97ac-ba3d3754267f" config-ref="Database_Config">
			<db:sql><![CDATA[INSERT INTO emp(emp_id, emp_first_name, emp_last_name, emp_full_name, emp_email, emp_address) VALUES(:empID ,:empFirstName, :empLastName, :empFullName, :empEmail, :empAddress)]]></db:sql>
			<db:input-parameters><![CDATA[#[output application/java
---
{
	empID: vars.empDTO.employeeID default uuid(),
	empFirstName: (vars.empDTO.employeeFirstName default ""),
	empLastName: (vars.empDTO.employeeLastName default ""),
	empFullName: vars.empDTO.employeeFullName,
	empEmail: vars.empDTO.employeeEmail,
	empAddress: vars.empDTO.address
}]]]></db:input-parameters>
		</db:insert>
		<ee:transform doc:name="Transform Message">
            <ee:message>
                <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
  employeeID: vars.empDTO.employeeID,
  status: "Create Successed!!"
} as Object {encoding: "UTF-8", mediaType: "application/json"}]]></ee:set-payload>
            </ee:message>
        </ee:transform>
		<logger level="INFO" doc:name="End Logger" doc:id="58367fe7-8d39-417b-9ff1-cfe2f8345a04" message="Process ened" />
    </flow>
</mule>
